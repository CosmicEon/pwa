{"version":3,"sources":["components/App/logo.svg","utils/helpers.js","components/AddToHome2/AddToHome2.jsx","components/App/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","shouldDisplayPopUp","userAgent","window","navigator","toLowerCase","test","isIos","standalone","AddToHome2","props","deferredPrompt","useState","bannerVisible","setBannerVisible","addEventListener","e","preventDefault","shouldRender","className","onClick","prompt","userChoice","then","choiceResult","outcome","console","log","handleOnAddToHomescreen","App","src","logo","alt","href","target","rel","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iFAAAA,EAAOC,QAAU,IAA0B,kC,oMCQ9BC,EAAqB,kBARpB,WACZ,IAAMC,EAAYC,OAAOC,UAAUF,UAAUG,cAC7C,MAAO,mBAAmBC,KAAKJ,GAMOK,MAFtC,eAAgBJ,OAAOC,WAAaD,OAAOC,UAAUI,aC8CxCC,G,YAhDI,SAACC,GAAW,IAEzBC,EAFwB,EACcC,oBAAS,GADvB,mBACrBC,EADqB,KACNC,EADM,KAI5BX,OAAOY,iBAAiB,uBAAuB,SAACC,GAE9CA,EAAEC,iBAEFN,EAAiBK,EAEjBF,GAAiB,MAGnB,IAmBMI,EAAeL,GAAiBZ,IAEtC,OACE,6BACGiB,EACC,6BACE,4BACEC,UAAU,eACVC,QAAS,SAACJ,GAAD,OA3Ba,SAACA,GAC/BA,EAAEC,iBAEFN,EAAeU,SACfV,EAAeW,WACZC,MAAK,SAACC,GAEwB,aAAzBA,EAAaC,QACfC,QAAQC,IAAI,iCAEZD,QAAQC,IAAI,kCAGdhB,EAAiB,QAcGiB,CAAwBZ,KAF1C,oBAKA,Q,sBCTKa,MAhCf,WASE,OACE,yBAAKV,UAAU,OAGb,kBAAC,EAAD,MACA,4BAAQA,UAAU,cAChB,yBAAKW,IAAKC,IAAMZ,UAAU,WAAWa,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEb,UAAU,WACVc,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCbFC,EAAcC,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BvC,UAAUwC,cACPC,SAASH,GACTnB,MAAK,SAAAuB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf/C,UAAUwC,cAAcQ,YAI1B1B,QAAQC,IACN,iHAKEgB,GAAUA,EAAOU,UACnBV,EAAOU,SAASP,KAMlBpB,QAAQC,IAAI,sCAGRgB,GAAUA,EAAOW,WACnBX,EAAOW,UAAUR,WAO5BS,OAAM,SAAAC,GACL9B,QAAQ8B,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBjB,GACvB,GAA6C,kBAAmBvC,UAAW,CAGzE,GADkB,IAAIyD,IAAIC,OAAwB3D,OAAOmC,SAASL,MACpD8B,SAAW5D,OAAOmC,SAASyB,OAIvC,OAGF5D,OAAOY,iBAAiB,QAAQ,WAC9B,IAAM2B,EAAK,UAAMoB,OAAN,sBAEP1B,IAgEV,SAAiCM,EAAOC,GAEtCqB,MAAMtB,EAAO,CACXuB,QAAS,CAAE,iBAAkB,YAE5B1C,MAAK,SAAA2C,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ClE,UAAUwC,cAAc2B,MAAMhD,MAAK,SAAAuB,GACjCA,EAAa0B,aAAajD,MAAK,WAC7BpB,OAAOmC,SAASmC,eAKpBhC,EAAgBC,EAAOC,MAG1BY,OAAM,WACL7B,QAAQC,IACN,oEAvFA+C,CAAwBhC,EAAOC,GAI/BvC,UAAUwC,cAAc2B,MAAMhD,MAAK,WACjCG,QAAQC,IACN,iHAMJc,EAAgBC,EAAOC,OCvC/BC,K","file":"static/js/main.53380186.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const isIos = () => {\n  const userAgent = window.navigator.userAgent.toLowerCase();\n  return /iphone|ipad|ipod/.test(userAgent);\n};\n\nconst isInStandaloneMode = () =>\n  'standalone' in window.navigator && window.navigator.standalone;\n\nexport const shouldDisplayPopUp = () => isIos() && !isInStandaloneMode()","import React, { useState } from 'react';\nimport { shouldDisplayPopUp } from '../../utils/helpers';\nimport './style.css';\n\nconst AddToHome2 = (props) => {\n  const [bannerVisible, setBannerVisible] = useState(false);\n  let deferredPrompt;\n\n  window.addEventListener('beforeinstallprompt', (e) => {\n    // Prevent Chrome 67 and earlier from automatically showing the prompt\n    e.preventDefault();\n    // Stash the event so it can be triggered later.\n    deferredPrompt = e;\n\n    setBannerVisible(true);\n  })\n\n  const handleOnAddToHomescreen = (e) => {\n    e.preventDefault();\n\n    deferredPrompt.prompt();  // Wait for the user to respond to the prompt\n    deferredPrompt.userChoice\n      .then((choiceResult) => {\n\n        if (choiceResult.outcome === 'accepted') {\n          console.log('User accepted the A2HS prompt');\n        } else {\n          console.log('User dismissed the A2HS prompt');\n        }\n\n        deferredPrompt = null;\n\n      });\n  }\n\n  // const shouldRender = true; // for testing\n  const shouldRender = bannerVisible && shouldDisplayPopUp();\n\n  return (\n    <div>\n      {shouldRender ? (\n        <div>\n          <button\n            className=\"ad2hs-prompt\"\n            onClick={(e) => handleOnAddToHomescreen(e)}\n          >Install Web App</button>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default AddToHome2;","import React from 'react';\nimport AddToHome from '../AddToHome/AddToHome';\nimport AddToHome2 from '../AddToHome2/AddToHome2';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n\n  const handleHomeMenuIcon = (e) => {\n    e.preventDefault();\n    // Stash the event so it can be triggered later.\n    // deferredPrompt = e;\n    window.showInstallPromotion();\n  }\n\n  return (\n    <div className=\"App\">\n      {/* <button onClick={(e) => handleHomeMenuIcon(e)}>add icon</button> */}\n      {/* <AddToHome onAddToHomescreenClick={handleHomeMenuIcon}/> */}\n      <AddToHome2 />\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}